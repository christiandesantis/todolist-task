version: '3.8'

# Networks
networks:
  main_network:
    driver: ${DOCKER_NETWORK_DRIVER:-bridge}

# Volumes
volumes:
  mysqldata:
    driver: local

# Container Services
services:
    # Redis Container
    redis:
      container_name: '${DOCKER_CONTAINER_PREFIX:-quasarnest}_redis'
      image: redis
      environment:
        - ALLOW_EMPTY_PASSWORD=yes
      networks:
        - main_network
      ports:
        - '${DOCKER_REDIS_FORWARD_PORT:-5003}:6379'

    # Database Container
    database:
      build:
        context: ./database
        dockerfile: Dockerfile.mysql
      image: mysql/mysql-server:latest
      container_name: '${DOCKER_CONTAINER_PREFIX:-quasarnest}_${DB_DIALECT:-mysql}'
      tty: true
      ports:
        - '${DOCKER_DB_FORWARD_PORT:-3306}:3306'
      env_file: '.env'
      command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --authentication_policy=mysql_native_password
      environment:
          MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
          MYSQL_DATABASE: '${DB_NAME}'
          MYSQL_USER: '${DB_USER}'
          MYSQL_PASSWORD: '${DB_PASSWORD}'
          MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
          TZ: '${TIMEZONE-America/New_York}'
      networks:
        - main_network
      volumes:
        - ./database/mysqldata:/var/lib/mysql:rw,delegated

    # Backend Container
    backend:
      container_name: '${DOCKER_CONTAINER_PREFIX:-quasarnest}_backend_${DOCKER_ENV_SHORT}'
      image: ${DOCKER_CONTAINER_PREFIX}-backend-${DOCKER_ENV_SHORT}:1.0.0
      build:
          context: ./backend
          target: ${DOCKER_ENV}
          dockerfile: Dockerfile.${DOCKER_ENV_SHORT}
      command: npm run start:${DOCKER_ENV_SHORT}
      ports:
          - 3000:3000
          - 9229:9229
          - 8443:8443
      networks:
          - main_network
      volumes:
          - ./backend:/usr/src/app
          - /usr/src/app/node_modules
          - /etc/letsencrypt:/etc/letsencrypt
          - /var/lib/letsencrypt:/var/lib/letsencrypt
      restart: unless-stopped
      env_file: '.env'
      depends_on:
        - database
        - redis
      links:
        - database
        - redis

    # Frontend Container
    frontend:
      container_name: '${DOCKER_CONTAINER_PREFIX:-nestjs}_frontend_${DOCKER_ENV_SHORT}'
      image: ${DOCKER_CONTAINER_PREFIX}-frontend-${DOCKER_ENV_SHORT}:1.0.0
      build:
          context: ./frontend
          dockerfile: Dockerfile.${DOCKER_ENV_SHORT}
      ports:
          - 9000:3000
          - 80:80
          - 443:443
      networks:
          - main_network
      volumes:
          - ./frontend:/usr/src/app
          - /usr/src/app/node_modules
          - ${DOCKER_HOST_SSL_CERT:-./ssl_certificates/cert.pem}:${DOCKER_NGINX_SSL_CERT:-/etc/ssl/certs/cert.pem}
          - ${DOCKER_HOST_SSL_KEY:-./ssl_certificates/key.pem}:${DOCKER_NGINX_SSL_KEY:-/etc/ssl/private/key.pem}
      restart: unless-stopped
      env_file: '.env'
      depends_on:
        - backend
      links:
        - backend
